"""
move the fields last_name, first_name and middle_name to a separate table users
and add new hashed_password field to users table

Revision ID: a16b0698761c
Revises: e21b3e105b0e
Create Date: 2024-07-08 11:29:42.121790

"""
import datetime
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'a16b0698761c'
down_revision: Union[str, None] = 'e21b3e105b0e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic ###
    conn = op.get_bind()

    _rename_table('doctors')
    _rename_table('patients')
    _rename_table('visiting_sessions')
    _rename_table('visits')

    users_table = _create_users_table()
    doctors_table = _create_doctors_table()
    patients_table = _create_patients_table()
    visiting_sessions_table = _visiting_sessions_table()
    visits_table = _create_visits_table()

    res = conn.execute(sa.text("select * from temp_doctors"))
    result = res.mappings().all()
    doctors = []
    doctor_users = []
    for item in result:
        doctors.append(
            {
                'user_id': item['id'],
                'experience': item['experience'],
                'quit_clinic': item['quit_clinic'],
                'speciality_id': item['speciality_id'],
                'category_id': item['category_id'],
            }
        )
        doctor_users.append(
            {
                'last_name': item['last_name'],
                'first_name': item['first_name'],
                'middle_name': item['middle_name'],
            }
        )
    count_doctors = len(doctor_users)
    op.bulk_insert(doctors_table, doctors)
    op.bulk_insert(users_table, doctor_users)

    res = conn.execute(sa.text("select middle_name, last_name, first_name from temp_patients"))
    patient_users = [{**i} for i in res.mappings().all()]
    op.bulk_insert(users_table, patient_users)

    res = conn.execute(sa.text("select id, birthday, category_id from temp_patients"))
    result = res.mappings().all()
    patients = []
    for item in result:
        patients.append(
            {
                'user_id': item['id'] + count_doctors,
                'birthday': datetime.date.fromisoformat(item['birthday']),
                'category_id': item['category_id'],
            }
        )
    op.bulk_insert(patients_table, patients)

    res = conn.execute(sa.text("select * from temp_visiting_sessions"))
    result = res.mappings().all()
    visiting_sessions = []
    for item in result:
        visiting_sessions.append(
            {
                'id': item['id'],
                'patient_id': item['patient_id'] + count_doctors,
            }
        )
    op.bulk_insert(visiting_sessions_table, visiting_sessions)

    res = conn.execute(sa.text("select * from temp_visits"))
    visits = []
    for item in res.mappings().all():
        visits.append(
            {
                item['id']: item['id'],
                item['visiting_session_id']: item['visiting_session_id'],
                item['doctor_id']: item['doctor_id'],
                item['service_id']: item['service_id'],
                item['diagnosis_id']: item['diagnosis_id'],
                item['appointment_datetime']: datetime.datetime.fromisoformat(item['appointment_datetime']),
                item['discounted_price']: item['discounted_price'],
                item['anamnesis']: item['anamnesis'],
                item['opinion']: item['opinion'],
            }
        )
    op.bulk_insert(visits_table, visits)

    _drop_table('temp_doctors')
    _drop_table('temp_patients')
    _drop_table('temp_visiting_sessions')
    _drop_table('temp_visits')
    # ### end Alembic commands ###


def _create_users_table():
    return op.create_table(
        'users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('last_name', sa.String(length=50), nullable=False),
        sa.Column('first_name', sa.String(length=50), nullable=False),
        sa.Column('middle_name', sa.String(length=50), nullable=True),
        sa.Column('hashed_password', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )


def _create_doctors_table():
    return op.create_table(
        'doctors',
        sa.Column(
            'user_id',
            sa.Integer(),
            sa.ForeignKey("users.id"),
            nullable=False,
        ),
        sa.Column('experience', sa.Integer(), nullable=False),
        sa.Column('quit_clinic', sa.Boolean(), nullable=False, default=False),
        sa.Column(
            'speciality_id',
            sa.Integer(),
            sa.ForeignKey("specialities.id"),
            nullable=False,
        ),
        sa.Column(
            'category_id',
            sa.Integer(),
            sa.ForeignKey("categories.id"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint('user_id'),
    )


def _create_patients_table():
    return op.create_table(
        'patients',
        sa.Column(
            'user_id',
            sa.Integer(),
            sa.ForeignKey("users.id"),
            nullable=False,
        ),
        sa.Column('birthday', sa.Date(), nullable=False),
        sa.Column(
            'category_id',
            sa.Integer(),
            sa.ForeignKey("patient_categories.id"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint('user_id'),
    )


def _visiting_sessions_table():
    return op.create_table(
        'visiting_sessions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'patient_id',
            sa.Integer(),
            sa.ForeignKey("patients.user_id", onupdate="CASCADE", ondelete="SET NULL"), nullable=False
        ),
        sa.PrimaryKeyConstraint('id'),
    )


def _create_visits_table():
    return op.create_table(
        'visits',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'visiting_session_id',
            sa.Integer(),
            sa.ForeignKey("visiting_sessions.id", onupdate="CASCADE", ondelete="SET NULL"),
            nullable=False,
        ),
        sa.Column(
            'doctor_id',
            sa.Integer(),
            sa.ForeignKey("doctors.user_id", onupdate="CASCADE", ondelete="SET NULL"),
            nullable=False,
        ),
        sa.Column(
            'service_id',
            sa.Integer(),
            sa.ForeignKey("services.id", onupdate="CASCADE", ondelete="RESTRICT"),
            nullable=False,
        ),
        sa.Column(
            'diagnosis_id',
            sa.Integer(),
            sa.ForeignKey("diagnoses.id", onupdate="CASCADE", ondelete="RESTRICT"),
            nullable=False,
        ),
        sa.Column('appointment_datetime', sa.DateTime(), nullable=True),
        sa.Column('discounted_price', sa.Integer(), nullable=False),
        sa.Column('anamnesis', sa.String(), nullable=False),
        sa.Column('opinion', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )


def _rename_table(old_table_name):
    new_table_name = "temp_" + old_table_name
    op.rename_table(old_table_name, new_table_name)


def _drop_table(table_name):
    op.drop_table(table_name)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'visits', type_='foreignkey')
    op.create_foreign_key(None, 'visits', 'doctors', ['doctor_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_constraint(None, 'visiting_sessions', type_='foreignkey')
    op.create_foreign_key(None, 'visiting_sessions', 'patients', ['patient_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.add_column('patients', sa.Column('id', sa.INTEGER(), nullable=False))
    op.add_column('patients', sa.Column('first_name', sa.VARCHAR(length=50), nullable=False))
    op.add_column('patients', sa.Column('last_name', sa.VARCHAR(length=50), nullable=False))
    op.add_column('patients', sa.Column('middle_name', sa.VARCHAR(length=50), nullable=True))
    op.drop_constraint(None, 'patients', type_='foreignkey')
    op.drop_column('patients', 'user_id')
    op.add_column('doctors', sa.Column('first_name', sa.VARCHAR(length=50), nullable=False))
    op.add_column('doctors', sa.Column('last_name', sa.VARCHAR(length=50), nullable=False))
    op.add_column('doctors', sa.Column('hashed_password', sa.VARCHAR(), nullable=True))
    op.add_column('doctors', sa.Column('middle_name', sa.VARCHAR(length=50), nullable=True))
    op.add_column('doctors', sa.Column('id', sa.INTEGER(), nullable=False))
    op.drop_constraint(None, 'doctors', type_='foreignkey')
    op.drop_column('doctors', 'user_id')
    op.drop_table('users')
    # ### end Alembic commands ###
